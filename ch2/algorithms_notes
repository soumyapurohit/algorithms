Append method takes O(1) while concatenation takes O(k)
To use timeit you create a Timer object whose parameters are two Python statements. The first parameter is a Python statement that you want to time; the second parameter is a statement that will run once to set up the test. The timeit module will then time how long it takes to execute the statement some number of times. By default timeit will try to run the statement one million times. When its done it returns the time as a floating point value representing the total number of seconds. However, since it executes the statement a million times you can read the result as the number of microseconds to execute the test one time. You can also pass timeit a named parameter called number that allows you to specify how many times the test statement is executed. The following session shows how long it takes to run each of our test functions 1000 times.

Table 2: Big-O Efficiency of Python List Operators
Operation

        Big-O Efficiency

index []            O(1)

index assignment   O(1)

append             O(1)

pop()              O(1)

pop(i)             O(n)

insert(i,item)     O(n)

del operator       O(n)

iteration          O(n)

contains (in)      O(n)

get slice [x:y]    O(k)

del slice          O(n)

set slice         O(n+k)

reverse           O(n)

concatenate       O(k)

sort              O(n log n)

multiply          O(nk)

Checking to see whether a key is in the dictionary or not is also ùëÇ(1). 

Dictionary comprehension is a method for transforming one dictionary into another dictionary. During this transformation, items within the original dictionary can be conditionally included in the new dictionary and each item can be transformed as needed.

dict_variable = {key:value for (key,value) in dictonary.items()}

‚úîÔ∏è The only dictionary operations that are not O(1) are those that require iteration.

